{"version":3,"sources":["list.png","Header.js","convertText.js","Main.js","HowTo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","to","className","target","href","id","namesOfficial","convertToDom","data","DOMParser","parseFromString","getTextAfterColon","line","slice","indexOf","trim","formatStyling","editorDom","querySelectorAll","forEach","strong","replaceWith","innerText","italic","link","convertText","headerCode","this","state","details","title","image","source","tlCredit","tlName","chapter","footerCode","prev","next","input","paragraphs","p","push","innerHTML","replace","getTextFromDom","output","currentName","extensions","i","length","toLowerCase","endsWith","isFileName","formatFileName","key","split","includes","firstWord","toUpperCase","join","code","word","querySelector","getChapTitle","tlNotes","markerRegExp","search","undefined","tlCode","match","marker","num","substring","newTlCode","formatTlMarker","inputDom","notes","li","formatTlNotes","setState","inputEditorConfig","plugins","Bold","Italic","Link","PasteFromOffice","Essentials","Paragraph","toolbar","tlNotesEditorConfig","List","Main","props","bind","onDetailChange","inputEditor","editor","BalloonEditor","config","spellcheck","onChange","event","getData","tlNotesEditor","name","value","newDetails","convert","Output","React","Component","Input","openTab","tabLinks","clicked","tab","area","tabcontent","document","style","display","tabs","Object","keys","TabMenu","defaultOpen","click","map","btn","Tab","text","onClick","TabContent","content","InputArea","DetailArea","inputs","DetailRow","label","placeholder","type","TlArea","Buttons","copyToClip","copied","select","execCommand","ActionButton","spellCheck","defaultValue","HowTo","src","alt","App","basename","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,kC,kLCG5B,SAASC,IACtB,OACE,gCACE,4BACG,kBAAC,IAAD,CAAMC,GAAG,KAAT,8BAEH,yBAAKC,UAAU,cACb,yIAEE,6BAFF,mHAIE,6BAJF,gBAIqB,uBAAGC,OAAO,SAASC,KAAK,oCAAxB,UAJrB,KAMA,wBAAIC,GAAG,UACL,4BAAK,kBAAC,IAAD,CAAMJ,GAAG,UAAT,eACL,4BAAI,uBAAGE,OAAO,SAASC,KAAK,0CAAxB,gB,kIClBRE,EAAgB,CACpB,YACA,OACA,SACA,QACA,QACA,SACA,UACA,QACA,SACA,QACA,UACA,MACA,UACA,SACA,SACA,OACA,UACA,WACA,aACA,OACA,SACA,QACA,SAIF,SAASC,EAAaC,GACpB,OAAO,IAAIC,WAAYC,gBAAgBF,EAAM,aAmB/C,SAASG,EAAkBC,GACzB,OAAOA,EAAKC,MAAMD,EAAKE,QAAQ,KAAO,GAAGC,OAiC3C,SAASC,EAAcC,GAUrB,OATAA,EAAUC,iBAAiB,UAAUC,SAAQ,SAAUC,GACrDA,EAAOC,YAAP,aAAyBD,EAAOE,UAAhC,WAEFL,EAAUC,iBAAiB,KAAKC,SAAQ,SAAUI,GAChDA,EAAOF,YAAP,YAAwBE,EAAOD,UAA/B,UAEFL,EAAUC,iBAAiB,KAAKC,SAAQ,SAAUK,GAChDA,EAAKH,YAAL,WAAqBG,EAAKpB,KAA1B,YAAkCoB,EAAKF,UAAvC,SAEKL,EAiLMQ,MA9Kf,WAKE,IAAMC,EAAU,iCAETC,KAAKC,MAAMC,QAAQC,MAAM,GAFhB,4BAGTH,KAAKC,MAAMC,QAAQE,MAAM,GAHhB,6BAIRJ,KAAKC,MAAMC,QAAQG,OAAO,GAJlB,oCAKDL,KAAKC,MAAMC,QAAQI,SAAS,GAL3B,8BAMAN,KAAKC,MAAMC,QAAQK,OAAO,GAN1B,sBAOPP,KAAKC,MAAMC,QAAQM,QAAQ,GAPpB,eAuCVC,EAAU,gCAEVT,KAAKC,MAAMC,QAAQQ,KAAK,GAFd,6BAGVV,KAAKC,MAAMC,QAAQS,KAAK,GAHd,kBAOZC,EA/GN,SAAwBtB,GACtB,IAAMuB,EAAavB,EAAUC,iBAAiB,KACxCqB,EAAQ,GAId,OAHAC,EAAWrB,SAAQ,SAAUsB,GAC3BF,EAAMG,KAAKD,EAAEE,UAAUC,QAAQ,UAAW,QAErCL,EAyGKM,CADG7B,EAAcT,EAAaoB,KAAKC,MAAMW,SAEjDO,EAASpB,EAETqB,EAAc,GAClBR,EAAMpB,SAAQ,SAAUP,GACtB,GAAY,IAARA,EAEF,GAlGN,SAAoBA,GAElB,IADA,IAAMoC,EAAa,CAAC,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAC5DC,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IACrC,GAAIrC,EAAKuC,cAAcC,SAASJ,EAAWC,IACzC,OAAO,EAGX,OAAO,EA2FCI,CAAWzC,GAIbkC,GAjCS,kCAiCWF,QAAQ,QAzFpC,SAAwBhC,GACtBA,EAAOA,EAAKG,OAEZ,IADA,IAAMiC,EAAa,CAAC,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAC5DC,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IACrC,GAAIrC,EAAKuC,cAAcC,SAASJ,EAAWC,IACzC,OAAOrC,EAAKgC,QAAQI,EAAWC,GAAI,IAGvC,OAAOrC,EAiFoC0C,CAAe1C,IACpDmC,EAAc,OAEX,CACH,IAAIQ,EAAM3C,EAAKC,MAAM,EAAGD,EAAKE,QAAQ,MAAM0C,MAAM,KAEjD,GAAID,EAAIL,OAAS,IAAMtC,EAAK6C,SAAS,KAEnCX,GAAUlC,EAAO,WAEd,CAEH,IAAI8C,EAAYH,EAAI,GACpB,GAAgC,aAA5BG,EAAUC,cAEZb,GA3CQ,kCA2CeF,QAAQ,QAASjC,EAAkBC,IAC1DmC,EAAc,QAEX,GAAgC,YAA5BW,EAAUC,cAEjBb,GA3CO,8CA2CeF,QAAQ,QAASjC,EAAkBC,IACzDmC,EAAc,OAEX,CAGH,IADAQ,EAAMA,EAAIK,KAAK,OACJb,EAAa,CAGtB,GAAIQ,EAAIE,SAAS,OAAQ,CACvBF,EAAMA,EAAIX,QAAQ,MAAO,IAAI7B,OAE7B+B,GAvEG,kDAuEYF,QAAQ,QAAUtC,EAAcmD,SAASF,EAAII,eAAiBJ,EAAM,WAEhF,CACH,IAAIM,EAAOvD,EAAcmD,SAASF,EAAII,eAlFrC,sBAGF,mCAgFCb,GAAUe,EAAKjB,QAAQ,SArJRkB,EAqJuCP,GApJxD,GAAGI,cAAgBG,EAAKjD,MAAM,EAAGiD,EAAKZ,SAuJtCH,EAAcQ,EAEhBT,GAAUnC,EAAkBC,GAAQ,SA1JhD,IAA+BkD,KAiK7BhB,GAAU,OACV,IAAIhB,EASN,SAAsBtB,GACpB,GAAIA,EAAKiD,SAAS,SAAWjD,EAAKiD,SAAS,OAAQ,CACjD,IACI3B,EADYvB,EAAaC,GAAMuD,cAAc,KAC5BzC,UAErB,OADAQ,EAAQA,EAAMc,QAAQ,IAAK,KAbjBoB,CAAarC,KAAKC,MAAMqC,SACpCnB,EAsBF,SAAwBA,EAAQhB,GAC9B,IAAMoC,EAAe,WACrB,IAAoC,GAAhCpB,EAAOqB,OAAOD,SACHE,GAATtC,EAAoB,CACtB,IAAIuC,EAAM,oBAAgBvC,EAAhB,sBAAmCA,EAAnC,qCACMgB,EAAOwB,MAAMJ,GACrB/C,SAAQ,SAAUoD,GACxB,IAAIC,EAAMD,EAAOE,UAAUF,EAAOzD,QAAQ,KAAO,EAAGyD,EAAOzD,QAAQ,MAC/D4D,EAAYL,EAAOzB,QAAQ,OAAQ4B,GACvC1B,EAASA,EAAOF,QAAQ2B,EAAQG,MAItC,OAAO5B,EAnCE6B,CAAe7B,EAAQhB,GAChCgB,GAuCF,SAAuBmB,EAASnC,GAC9B,QAAasC,GAATtC,EAAoB,CACtB,IAAI8C,EAAW5D,EAAcT,EAAa0D,IACtCY,EAAQ,GACMD,EAAS1D,iBAAiB,MAClCC,SAAQ,SAAU2D,GAC1BD,EAAMnC,KAAKoC,EAAGnC,UAAUC,QAAQ,UAAW,QAM7C,IAJA,IAAIE,EAAM,qBAGNuB,EAAM,oBAAgBvC,EAAhB,2BAAwCA,EAAxC,qCACDmB,EAAI,EAAGA,EAAI4B,EAAM3B,OAAQD,IAAK,CACrC,IAAIyB,EAAYL,EAAOzB,QAAQ,OAAQK,EAAI,GAC3CH,GAAU4B,EAAU9B,QAAQ,OAAQiC,EAAM5B,IAG5C,OADAH,EAASA,EAAOF,QAAQ,YAAa,MAGlC,MAAO,GA1DFmC,CAAcpD,KAAKC,MAAMqC,QAASnC,GAC5CgB,GAAUV,EACVT,KAAKqD,SAAS,CAAElC,OAAQA,KCnMpBmC,EAAoB,CACxBC,QAAS,CAACC,IAAMC,IAAQC,IAAMC,IAAiBC,IAAYC,KAC3DC,QAAS,CAAC,OAAQ,SAAU,OAAQ,IAAK,OAAQ,SAG7CC,EAAsB,CAC1BR,QAAS,CAACC,IAAMC,IAAQC,IAAMM,IAAML,IAAiBC,IAAYC,KACjEC,QAAS,CAAC,OAAQ,SAAU,OAAQ,eAAgB,IAAK,OAAQ,SAS9CG,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDpE,YAAcA,EAAYqE,KAAZ,gBACnB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKlE,MAAQ,CACXW,MAXY,iJAYZV,QAAS,CACPC,MAAO,CAAC,QAAS,GAAI,IACrBC,MAAO,CAAC,eAAgB,GAAI,IAC5BC,OAAQ,CAAC,eAAgB,GAAI,IAC7BE,OAAQ,CAAC,aAAc,GAAI,IAC3BD,SAAU,CAAC,oBAAqB,GAAI,IACpCE,QAAS,CAAC,UAAW,GAAI,IACzBE,KAAM,CAAC,wBAAyB,aAAc,IAC9CC,KAAM,CAAC,oBAAqB,aAAc,KAE5C2B,QAnBY,iKAoBZnB,OAAQ,IAEV,EAAKkD,YACH,kBAAC,IAAD,CACEC,OAAQC,IACRC,OAAQlB,EACRzE,KAAM,EAAKoB,MAAMW,MACjBlC,GAAG,cACH+F,WAAW,QACXC,SAAU,SAACC,EAAOL,GAChB,IAAMzF,EAAOyF,EAAOM,UACpB,EAAKvB,SAAS,CAAEzC,MAAO/B,OAI7B,EAAKgG,cACH,kBAAC,IAAD,CACEP,OAAQC,IACRC,OAAQT,EACRlF,KAAM,EAAKoB,MAAMqC,QACjB5D,GAAG,WACH+F,YAAY,EACZC,SAAU,SAACC,EAAOL,GAChB,IAAMzF,EAAOyF,EAAOM,UACpB,EAAKvB,SAAS,CAAEf,QAASzD,OAzCd,E,2DA+CJiG,EAAMC,GACnB/E,KAAKqD,UAAS,SAACpD,EAAOiE,GACpB,IAAMc,EAAa/E,EAAMC,QAEzB,OADA8E,EAAWF,GAAM,GAAKC,EACf,CAAE7E,QAAS8E,Q,+BAKpB,OACE,yBAAKzG,UAAU,QACb,kBAAC,EAAD,CAAO8F,YAAarE,KAAKqE,YACvBnE,QAASF,KAAKC,MAAMC,QACpBkE,eAAgBpE,KAAKoE,eACrBS,cAAe7E,KAAK6E,gBACtB,kBAAC,EAAD,CAASI,QAASjF,KAAKF,cACvB,kBAACoF,EAAD,CAAQH,MAAO/E,KAAKC,MAAMkB,c,GAhEAgE,IAAMC,WAsElCC,E,kDACJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDoB,QAAU,EAAKA,QAAQnB,KAAb,gBACf,EAAKlE,MAAQ,CACXsF,SAAU,CACR,KAAQ,YACR,QAAW,aACX,WAAY,UAEdC,QAAS,IATM,E,oDAaXC,GAGN,IAFA,IAAMC,EAAO,IAAM1F,KAAKC,MAAMsF,SAASE,GACjCE,EAAaC,SAASrG,iBAAiB,eACpC+B,EAAI,EAAGA,EAAIqE,EAAWpE,OAAQD,IACrCqE,EAAWrE,GAAGuE,MAAMC,QAAU,OAEhCF,SAASxD,cAAcsD,GAAMG,MAAMC,QAAU,QAC7C9F,KAAKqD,SAAS,CAAEmC,QAASC,M,+BAIzB,OACE,yBAAK/G,GAAG,SACN,kBAAC,EAAD,CAASqH,KAAMC,OAAOC,KAAKjG,KAAKC,MAAMsF,UAAWC,QAASxF,KAAKC,MAAMuF,QAASF,QAAStF,KAAKsF,UAC5F,kBAAC,EAAD,CAAWjB,YAAarE,KAAKkE,MAAMG,cACnC,kBAAC,EAAD,CAAYnE,QAASF,KAAKkE,MAAMhE,QAASkE,eAAgBpE,KAAKkE,MAAME,iBACpE,kBAAC,EAAD,CAAQS,cAAe7E,KAAKkE,MAAMW,qB,GA9BtBM,IAAMC,WAoCpBc,E,kDACJ,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IACDjE,MAAQ,CACXkG,YAAa,QAHE,E,gEAQjBP,SAASxD,cAAT,kBAAkCpC,KAAKC,MAAMkG,YAA7C,OAA8DC,U,+BAGtD,IAAD,OACDL,EAAO/F,KAAKkE,MAAM6B,KAAKM,KAAI,SAACC,GAAD,OAC/B,kBAACC,EAAD,CAAK3E,IAAK0E,EACRvB,MAAOuB,EACP/H,UAAW,WAAa,EAAK2F,MAAMsB,UAAYc,EAAM,UAAY,IACjEE,KAAMF,EACNG,QAAS,kBAAM,EAAKvC,MAAMoB,QAAQgB,SAGtC,OAAO,yBAAK/H,UAAU,WAAWwH,O,GArBfZ,IAAMC,WAyB5B,SAASmB,EAAIrC,GACX,OACE,4BAAQ3F,UAAW2F,EAAM3F,UAAWwG,MAAOb,EAAMa,MAAO0B,QAASvC,EAAMuC,SACpEvC,EAAMsC,M,IAKPE,E,uKAEF,OACE,yBAAKhI,GAAIsB,KAAKkE,MAAMxF,GAAIH,UAAU,cAC/ByB,KAAKkE,MAAMyC,a,GAJKxB,IAAMC,WAUzBwB,E,uKAEF,OAAO,kBAAC,EAAD,CAAYlI,GAAI,YAAaiI,QAAS3G,KAAKkE,MAAMG,kB,GAFpCc,IAAMC,WAMxByB,E,uKACM,IAAD,OACDC,EAASd,OAAOC,KAAKjG,KAAKkE,MAAMhE,SAASmG,KAAI,SAACzE,GAAD,OACjD,kBAACmF,EAAD,CAAWnF,IAAKA,EACdkD,KAAMlD,EACNoF,MAAO,EAAK9C,MAAMhE,QAAQ0B,GAAK,GAC/BqF,YAAa,EAAK/C,MAAMhE,QAAQ0B,GAAK,GACrCmD,MAAO,EAAKb,MAAMhE,QAAQ0B,GAAK,GAC/BwC,eAAgB,EAAKF,MAAME,oBAGzBuC,EACJ,oCACE,yBAAKpI,UAAU,OACb,kGAAuE,uBAAGE,KAAK,+DAAR,0BAAvE,MAEDqI,GAGL,OAAO,kBAAC,EAAD,CAAYpI,GAAI,aAAciI,QAASA,Q,GAnBzBxB,IAAMC,WAuB/B,SAAS2B,EAAU7C,GACjB,OACE,yBAAK3F,UAAU,OACb,2BAAOA,UAAU,UAAU2F,EAAM8C,OACjC,2BAAOE,KAAK,OACVD,YAAa/C,EAAM+C,YACnBlC,MAAOb,EAAMa,MACbL,SAAU,SAACC,GAAD,OAAWT,EAAME,eAAeF,EAAMY,KAAMH,EAAMnG,OAAOuG,W,IAMrEoC,E,uKAEF,OAAO,kBAAC,EAAD,CAAYzI,GAAI,SAAUiI,QAAS3G,KAAKkE,MAAMW,oB,GAFpCM,IAAMC,WAMrBgC,E,kDACJ,WAAYlD,GAAQ,IAAD,8BACjB,cAAMA,IACDmD,WAAa,EAAKA,WAAWlD,KAAhB,gBAClB,EAAKlE,MAAQ,CACXqH,QAAQ,GAJO,E,yDASjB1B,SAASxD,cAAc,WAAWmF,SAClC3B,SAAS4B,YAAY,QACrBxH,KAAKqD,SAAS,CAAEiE,QAAQ,M,+BAIxB,OACE,yBAAK5I,GAAG,WACN,kBAAC+I,EAAD,CAAchB,QAASzG,KAAKkE,MAAMe,QAASvG,GAAG,aAAa8H,KAAK,YAChE,kBAACiB,EAAD,CAAchB,QAASzG,KAAKqH,WAAY3I,GAAG,UAAU8H,KAAMxG,KAAKC,MAAMqH,OAAS,SAAW,qB,GAnB5EnC,IAAMC,WAyB5B,SAASqC,EAAavD,GACpB,OACE,4BAAQuC,QAASvC,EAAMuC,QAAS/H,GAAIwF,EAAMxF,IAAKwF,EAAMsC,MAIzD,SAAStB,EAAOhB,GACd,OAAO,8BAAUwD,WAAW,QAAQhJ,GAAG,SAASiJ,aAAczD,EAAMa,Q,sBChQvD,SAAS6C,IACtB,OACE,yBAAKlJ,GAAG,aACN,+CACA,wCACA,wFACA,4BACE,4BAAI,yCAAJ,sDAA6E,uBAAGD,KAAK,0EAAR,0BAA7E,kPACA,4BAAI,0CAAJ,oRACA,4BAAI,8EAAJ,wHACA,4BAAI,wDAAJ,kHACA,4BAAI,yCAAJ,wLAEF,qEACA,oCACE,6CADF,2FAEA,6BAAM,6CAFN,0CAGA,6BAHA,oDAIA,6BAJA,iDAKA,6BALA,gCAMA,6BAAM,6CANN,wCAQA,wHACA,oCACE,6CADF,oBAEA,6BAFA,yDAGA,6BAAM,6CAHN,oBAIA,6BACE,6BAAM,6CALR,oBAMA,6BAAM,6CANN,mDAOA,6BAAM,6CAPN,qBAUA,2CACA,4KAAiJ,uBAAGA,KAAK,+DAAR,0BAAjJ,wFAEA,wBAAIC,GAAG,kBAAP,gBACA,8HACA,sGAGA,qIACA,2GACA,gDAEA,4BACI,oFACA,kFAGJ,4BACE,4BAAI,4EAAJ,2FACA,4BAAI,qFAAJ,qGACA,yBAAKmJ,IAAKzH,IAAO0H,IAAI,oB,mBCjDd,SAASC,IAKtB,OACE,kBAAC,IAAD,CAAYC,SAAS,KACjB,kBAAC3J,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4J,KAAK,UACR,kBAACL,EAAD,OAEJ,kBAAC,IAAD,CAAOM,OAAK,EAACD,KAAK,KACd,kBAAC,EAAD,SCRME,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3F,MACvB,2DCZN4F,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAAS8C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6fc0b4ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/list.9e85d7a5.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <h1>\r\n        {<Link to='/'>DREAM!ing STORY FORMATTER</Link>}\r\n      </h1>\r\n      <div className='horizontal'>\r\n        <p>\r\n          A website to more easily upload event/gacha stories from the mobile idol game DREAM!ing to the fandom wiki.\r\n          <br />It takes formats your story chapter into text that can be pasted directly into the 'source'\r\n        section of the page.\r\n          <br />Developed by <a target='_blank' href='https://twitter.com/gayandasleep'>midori</a>.\r\n        </p>\r\n        <ul id='navbar'>\r\n          <li>{<Link to='/howto'>HOW TO USE</Link>}</li>\r\n          <li><a target='_blank' href='https://goo.gl/forms/Xu42LLAgWKxVYV873'>FEEDBACK</a></li>\r\n        </ul>\r\n      </div>\r\n    </header>\r\n  )\r\n}","const namesOfficial = [\r\n  'NARRATION',\r\n  'YUMA',\r\n  'YANAGI',\r\n  'TOUJI',\r\n  'SHION',\r\n  'SHINYA',\r\n  'SHIGURE',\r\n  'ISSEI',\r\n  'MIKAGE',\r\n  'SENRI',\r\n  'TAKAOMI',\r\n  'JIN',\r\n  'CHIZURU',\r\n  'KASUKA',\r\n  'MINATO',\r\n  'YUNI',\r\n  'RINTARO',\r\n  'KIRITANI',\r\n  'SARUWATARI',\r\n  'INOH',\r\n  'MAMORU',\r\n  'DYLAN',\r\n  'JUDAH',\r\n]\r\n\r\n//lmao\r\nfunction convertToDom(data) {\r\n  return new DOMParser().parseFromString(data, 'text/html');\r\n}\r\n\r\n//each line in CKEditor has <p> wrapper\r\n//params: editorDom - editor data already converted to DOM object\r\n//returns an Array of each line of text\r\nfunction getTextFromDom(editorDom) {\r\n  const paragraphs = editorDom.querySelectorAll('p');\r\n  const input = []\r\n  paragraphs.forEach(function (p) {\r\n    input.push(p.innerHTML.replace(/&nbsp;/g, ''));\r\n  });\r\n  return input;\r\n}\r\n\r\nfunction capitalizeFirstLetter(word) {\r\n  return word[0].toUpperCase() + word.slice(1, word.length);\r\n}\r\n\r\nfunction getTextAfterColon(line) {\r\n  return line.slice(line.indexOf(':') + 1).trim();\r\n}\r\n\r\n//helper function to check if the line is a file\r\n//params: line - a String\r\n//returns a boolean value representing if the string is a file name\r\nfunction isFileName(line) {\r\n  const extensions = ['.png', '.gif', '.jpg', '.jpeg', '.ico', '.pdf', '.svg'];\r\n  for (let i = 0; i < extensions.length; i++) {\r\n    if (line.toLowerCase().endsWith(extensions[i])) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//helper function to remove file extension if it exists\r\n//params: line - a String\r\n//returns a String with extension removed\r\nfunction formatFileName(line) {\r\n  line = line.trim();\r\n  const extensions = ['.png', '.gif', '.jpg', '.jpeg', '.ico', '.pdf', '.svg'];\r\n  for (let i = 0; i < extensions.length; i++) {\r\n    if (line.toLowerCase().endsWith(extensions[i])) {\r\n      return line.replace(extensions[i], '');\r\n    }\r\n  }\r\n  return line;\r\n}\r\n\r\n//helper function to format bold, italics, links based on HTML tags\r\n//params: editorDom - editor data already converted to DOM object\r\n//returns a DOM object with specified HTML tags converted to wiki code equivalent\r\nfunction formatStyling(editorDom) {\r\n  editorDom.querySelectorAll('strong').forEach(function (strong) {\r\n    strong.replaceWith(`'''${strong.innerText}'''`);\r\n  });\r\n  editorDom.querySelectorAll('i').forEach(function (italic) {\r\n    italic.replaceWith(`''${italic.innerText}''`);\r\n  });\r\n  editorDom.querySelectorAll('a').forEach(function (link) {\r\n    link.replaceWith(`[${link.href} ${link.innerText}]`);\r\n  });\r\n  return editorDom;\r\n}\r\n\r\nfunction convertText() {\r\n\r\n  //const values = getValues(); //get user input from all the tabs\r\n\r\n  //format wiki code with user input\r\n  const headerCode =\r\n    `{{Story Header\r\n|Title=${this.state.details.title[2]}        \r\n|Image=${this.state.details.image[2]}        \r\n|Source=${this.state.details.source[2]}        \r\n|TranslatorURL=${this.state.details.tlCredit[2]} \r\n|TranslatorName=${this.state.details.tlName[2]}\r\n|Chapter=${this.state.details.chapter[2]}       \r\n\r\n`;\r\n  const charaCode =\r\n    `}}{{VALUE|Dialogue=`;\r\n\r\n  const npcCode =\r\n    `}}{{NPC\r\n|Name=VALUE\r\n|Dialogue=`;\r\n\r\n  const unknownCode =\r\n    `}}{{NPC\r\n|Name=???\r\n|RealName=VALUE\r\n|Dialogue=`\r\n\r\n  const imageCode =\r\n    `}}{{Story Image|Image=VALUE\r\n\r\n`;\r\n\r\n  const locationCode =\r\n    `}}{{Location|Location=VALUE\r\n\r\n`;\r\n\r\n  const chapterCode =\r\n    `}}{{Chapter Divider|Chapter=VALUE\r\n      \r\n`;\r\n\r\n  const footerCode =\r\n    `{{Story Footer\r\n|Prev=${this.state.details.prev[2]}          \r\n|Next=${this.state.details.next[2]}          \r\n}}`\r\n\r\n  let inputDom = formatStyling(convertToDom(this.state.input));\r\n  let input = getTextFromDom(inputDom);\r\n  let output = headerCode;\r\n\r\n  let currentName = ''; //needed for case where dialogue has name on every line\r\n  input.forEach(function (line) {\r\n    if (line != '') { //ignore empty lines\r\n      //console.log('analyzing line: ' + line);\r\n      if (isFileName(line)) {\r\n        //console.log('isFileName: true...');\r\n        //if CG or scene change image file\r\n        //console.log('image file');\r\n        output += imageCode.replace('VALUE', formatFileName(line));\r\n        currentName = ''; //since its new section\r\n      }\r\n      else { //if dialogue line or header\r\n        let key = line.slice(0, line.indexOf(':')).split(' ');\r\n        //console.log(key);\r\n        if (key.length > 3 || !line.includes(':')){ //cases where 1 (Takaomi) or 2 (Takaomi & Senri) are speaking but there is a colon in the dialogue\r\n          //console.log('no colon, continue dialogue');\r\n          output += line + '\\n\\n';\r\n        }\r\n        else {\r\n          //console.log('key found...')\r\n          let firstWord = key[0]\r\n          if (firstWord.toUpperCase() === 'LOCATION') { //if heading\r\n            //console.log('new LOCATION');\r\n            output += locationCode.replace('VALUE', getTextAfterColon(line));\r\n            currentName = ''; //since its new section\r\n          }\r\n          else if (firstWord.toUpperCase() === 'CHAPTER') { //if heading\r\n            //console.log('new CHAPTER');\r\n            output += chapterCode.replace('VALUE', getTextAfterColon(line));\r\n            currentName = ''; //since its new section\r\n          }\r\n          else { //if character is speaking\r\n            //console.log('character speaking... ' + key);\r\n            key = key.join(' ');\r\n            if (key != currentName) { //if new character is speaking\r\n              //console.log('new character detected')\r\n              //add dialogueRender code to output\r\n              if (key.includes('???')) {\r\n                key = key.replace('???', '').trim();\r\n                let code = unknownCode;\r\n                output += code.replace('VALUE', (namesOfficial.includes(key.toUpperCase()) ? key : 'NPC'));\r\n              }\r\n              else {\r\n                let code = namesOfficial.includes(key.toUpperCase()) ? charaCode : npcCode;\r\n                output += code.replace('VALUE', capitalizeFirstLetter(key));\r\n              }\r\n              //update currentName\r\n              currentName = key;\r\n            }\r\n            output += getTextAfterColon(line) + '\\n\\n';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  output += '}}\\n';\r\n  let title = getChapTitle(this.state.tlNotes);\r\n  output = formatTlMarker(output, title);\r\n  output += formatTlNotes(this.state.tlNotes, title);\r\n  output += footerCode;\r\n  this.setState({ output: output });\r\n}\r\n\r\n//helper function to get and format chapter title from tl notes\r\n//assumes the editor has some data\r\nfunction getChapTitle(data) {\r\n  if (data.includes('<ol>') && data.includes('<p>')) { //editor already has the <p> in it, so user must input some sort of new <p> (the chapter title) and an <ol> (the TL notes)\r\n    let inputDom = (convertToDom(data).querySelector('p'));\r\n    let title = inputDom.innerText;\r\n    title = title.replace(' ', '');\r\n    return title;\r\n  }\r\n  else {\r\n    //ERROR: add alert to let user know they didn't provide a chapter title\r\n    //console.log('Please make sure to include a title in the TL Notes section')\r\n  }\r\n}\r\n\r\n//helper function to format tl note markers\r\nfunction formatTlMarker(output, title) {\r\n  const markerRegExp = /\\[\\d+\\]/g;\r\n  if (output.search(markerRegExp) != -1) { //if there is a tlMarker\r\n    if (title != undefined) {\r\n      let tlCode = `<span id='${title}RefNUM'>[[#${title}NoteNUM|<sup>[NUM]</sup>]]</span>`;\r\n      const markers = output.match(markerRegExp);\r\n      markers.forEach(function (marker) {\r\n        let num = marker.substring(marker.indexOf('[') + 1, marker.indexOf(']'));\r\n        let newTlCode = tlCode.replace(/NUM/g, num);\r\n        output = output.replace(marker, newTlCode)\r\n      });\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n//helper function to format TlNotes\r\n//assumes that there is a valid title and correct number of TL notes\r\nfunction formatTlNotes(tlNotes, title) {\r\n  if (title != undefined) {\r\n    let inputDom = formatStyling(convertToDom(tlNotes));\r\n    let notes = []\r\n    const listItems = inputDom.querySelectorAll('li');\r\n    listItems.forEach(function (li) {\r\n      notes.push(li.innerHTML.replace(/&nbsp;/g, ''));\r\n    });\r\n    let output =\r\n      `|-\r\n| colspan=\"2\"|`;\r\n    let tlCode = `<span id='${title}NoteNUM'>NUM.[[#${title}RefNUM|↑]] TEXT</span><br />`;\r\n    for (let i = 0; i < notes.length; i++) {\r\n      let newTlCode = tlCode.replace(/NUM/g, i + 1);\r\n      output += newTlCode.replace('TEXT', notes[i]);\r\n    }\r\n    output = output.replace(/<br \\/>$/m, '\\n');\r\n    return output;\r\n  }\r\n  else return ''\r\n}\r\n\r\nexport default convertText;","import React from 'react';\r\n\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport BalloonEditor from '@ckeditor/ckeditor5-editor-balloon/src/ballooneditor.js';\r\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold.js';\r\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic.js';\r\nimport Link from '@ckeditor/ckeditor5-link/src/link.js';\r\nimport List from '@ckeditor/ckeditor5-list/src/list.js';\r\nimport PasteFromOffice from '@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice';\r\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials.js';\r\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph.js';\r\n\r\nimport convertText from './convertText.js'\r\n\r\nconst inputEditorConfig = {\r\n  plugins: [Bold, Italic, Link, PasteFromOffice, Essentials, Paragraph],\r\n  toolbar: ['bold', 'italic', 'link', '|', 'undo', 'redo']\r\n};\r\n\r\nconst tlNotesEditorConfig = {\r\n  plugins: [Bold, Italic, Link, List, PasteFromOffice, Essentials, Paragraph],\r\n  toolbar: ['bold', 'italic', 'link', 'numberedList', '|', 'undo', 'redo']\r\n};\r\n\r\nconst inputTest = `<p>Senri: test</p><p>senri still speaking[1]</p><p>Location: Hallway</p><p>Chapter: Chapter 2</p><p>Senri: third line</p><p>NPC: test</p><p>NPC: still <i><strong>speaking</strong></i></p>`;\r\nconst inputDefault = `<p>If this is your first time using the formatter, please check the <a href='#/howto'>Text Guidelines</a> to make sure your text is ready.</p>`;\r\n\r\nconst notesTest = `<p>Chapter 1</p><ol><li>note 1</li></ol>`;\r\nconst notesDefault = `<p>If this is your first time using the formatter, please check the <a href='#/howto#tlNotesSection'>Text Guidelines</a> for how to add translation notes.</p>`;\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.convertText = convertText.bind(this);\r\n    this.onDetailChange = this.onDetailChange.bind(this);\r\n    this.state = {\r\n      input: inputDefault,\r\n      details: { //label, placeholder, value\r\n        title: ['Title', '', ''],\r\n        image: ['Header Image', '', ''],\r\n        source: ['Source Story', '', ''],\r\n        tlName: ['Translator', '', ''],\r\n        tlCredit: ['Translator Credit', '', ''],\r\n        chapter: ['Chapter', '', ''],\r\n        prev: ['Previous Chapter Link', '(optional)', ''],\r\n        next: ['Next Chapter Link', '(optional)', ''],\r\n      },\r\n      tlNotes: notesDefault,\r\n      output: '',\r\n    }\r\n    this.inputEditor = (\r\n      <CKEditor\r\n        editor={BalloonEditor}\r\n        config={inputEditorConfig}\r\n        data={this.state.input}\r\n        id='inputEditor'\r\n        spellcheck='false'\r\n        onChange={(event, editor) => {\r\n          const data = editor.getData();\r\n          this.setState({ input: data });\r\n        }}\r\n      />\r\n    )\r\n    this.tlNotesEditor = (\r\n      <CKEditor\r\n        editor={BalloonEditor}\r\n        config={tlNotesEditorConfig}\r\n        data={this.state.tlNotes}\r\n        id='tlEditor'\r\n        spellcheck={false}\r\n        onChange={(event, editor) => {\r\n          const data = editor.getData();\r\n          this.setState({ tlNotes: data });\r\n        }}\r\n      />\r\n    )\r\n  };\r\n\r\n  onDetailChange(name, value) {\r\n    this.setState((state, props) => {\r\n      const newDetails = state.details;\r\n      newDetails[name][2] = value;\r\n      return { details: newDetails };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='main'>\r\n        <Input inputEditor={this.inputEditor}\r\n          details={this.state.details}\r\n          onDetailChange={this.onDetailChange}\r\n          tlNotesEditor={this.tlNotesEditor} />\r\n        <Buttons convert={this.convertText} />\r\n        <Output value={this.state.output} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.openTab = this.openTab.bind(this);\r\n    this.state = {\r\n      tabLinks: {\r\n        'Text': 'inputArea',\r\n        'Details': 'detailArea',\r\n        'TL Notes': 'tlArea',\r\n      },\r\n      clicked: ''\r\n    }\r\n  }\r\n\r\n  openTab(tab) {\r\n    const area = '#' + this.state.tabLinks[tab]\r\n    const tabcontent = document.querySelectorAll('.tabcontent');\r\n    for (let i = 0; i < tabcontent.length; i++) {\r\n      tabcontent[i].style.display = 'none';\r\n    }\r\n    document.querySelector(area).style.display = 'block';\r\n    this.setState({ clicked: tab })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='input'>\r\n        <TabMenu tabs={Object.keys(this.state.tabLinks)} clicked={this.state.clicked} openTab={this.openTab} />\r\n        <InputArea inputEditor={this.props.inputEditor} />\r\n        <DetailArea details={this.props.details} onDetailChange={this.props.onDetailChange} />\r\n        <TlArea tlNotesEditor={this.props.tlNotesEditor} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass TabMenu extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      defaultOpen: 'Text',\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.querySelector(`[value='${this.state.defaultOpen}']`).click();\r\n  }\r\n\r\n  render() {\r\n    const tabs = this.props.tabs.map((btn) =>\r\n      <Tab key={btn}\r\n        value={btn}\r\n        className={'tablink' + (this.props.clicked === btn ? ' active' : '')}\r\n        text={btn}\r\n        onClick={() => this.props.openTab(btn)}\r\n      />\r\n    )\r\n    return <div className='tabMenu'>{tabs}</div>;\r\n  }\r\n}\r\n\r\nfunction Tab(props) {\r\n  return (\r\n    <button className={props.className} value={props.value} onClick={props.onClick}>\r\n      {props.text}\r\n    </button>\r\n  )\r\n}\r\n\r\nclass TabContent extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id={this.props.id} className='tabcontent'>\r\n        {this.props.content}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InputArea extends React.Component {\r\n  render() {\r\n    return <TabContent id={'inputArea'} content={this.props.inputEditor} />\r\n  }\r\n}\r\n\r\nclass DetailArea extends React.Component {\r\n  render() {\r\n    const inputs = Object.keys(this.props.details).map((key) =>\r\n      <DetailRow key={key}\r\n        name={key}\r\n        label={this.props.details[key][0]}\r\n        placeholder={this.props.details[key][1]}\r\n        value={this.props.details[key][2]}\r\n        onDetailChange={this.props.onDetailChange}\r\n      />\r\n    );\r\n    const content = (\r\n      <>\r\n        <div className='row'>\r\n          <p>For more explanation on what each text field does, check the wiki's <a href='https://dreaminglive.fandom.com/wiki/Story_Formatting_Guide'>Story Formatting Guide</a>.</p>\r\n        </div>\r\n        {inputs}\r\n      </>\r\n    )\r\n    return <TabContent id={'detailArea'} content={content} />\r\n  }\r\n}\r\n\r\nfunction DetailRow(props) {\r\n  return (\r\n    <div className='row'>\r\n      <label className='spacer'>{props.label}</label>\r\n      <input type='text'\r\n        placeholder={props.placeholder}\r\n        value={props.value}\r\n        onChange={(event) => props.onDetailChange(props.name, event.target.value)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nclass TlArea extends React.Component {\r\n  render() {\r\n    return <TabContent id={'tlArea'} content={this.props.tlNotesEditor} />\r\n  }\r\n}\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.copyToClip = this.copyToClip.bind(this)\r\n    this.state = {\r\n      copied: false,\r\n    }\r\n  }\r\n\r\n  copyToClip() {\r\n    document.querySelector('#output').select();\r\n    document.execCommand('copy');\r\n    this.setState({ copied: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='btnArea'>\r\n        <ActionButton onClick={this.props.convert} id='convertBtn' text='CONVERT' />\r\n        <ActionButton onClick={this.copyToClip} id='copyBtn' text={this.state.copied ? 'Copied' : 'Copy Output'} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction ActionButton(props) {\r\n  return (\r\n    <button onClick={props.onClick} id={props.id}>{props.text}</button>\r\n  )\r\n}\r\n\r\nfunction Output(props) {\r\n  return <textarea spellCheck='false' id='output' defaultValue={props.value}></textarea>\r\n}","import React from 'react';\r\nimport image from './list.png';\r\n\r\nexport default function HowTo() {\r\n  return (\r\n    <div id='container'>\r\n      <h2>TEXT GUIDELINES</h2>\r\n      <h3>Text Tab</h3>\r\n      <p>Copy and paste your translated chapter into the text box.</p>\r\n      <ul>\r\n        <li><strong>Names</strong> - Names follow the same rules as described in the <a href='https://dreaminglive.fandom.com/wiki/Story_Formatting_Guide#Story_Body'>Story Formatting Guide</a>. The formatter identifies which character is speaking and fills in the relevant template. This means narration lines should begin with 'Narration: ', and names that do not have their own templates will be formatted with the NPC template.</li>\r\n        <li><strong>Images</strong> - You can include whole row-images such as games screenshots or CGs by inserting the EXACT file name (ex. Friends in Tokyo 2 - 5.png) into the dialogue on its own line. Including the file extension is necessary for the formatter to recognize that it's being given a file.</li>\r\n        <li><strong>Headings for location changes/new chapters</strong> - You can indicate scene changes by including a line that starts with 'Location: ' or 'Chapter: ' in the dialogue. </li>\r\n        <li><strong>Bold and italic text</strong> - Bold and italic text will be formatted, and should be preserved when pasted in from a Word/Google document.</li>\r\n        <li><strong>Links</strong> - Links should also be preserved when pasted in. For now, internal wiki links are not supported so make sure every link is like an external one (i.e. with the https:// in front).</li>\r\n      </ul>\r\n      <p>Here's an example of a short dialogue:</p>\r\n      <blockquote>\r\n        <strong>Person A:</strong> This is a line said by Person A! Their line starts with their name followed by a colon.\r\n      <br /><strong>Person B:</strong> This is a line said by another person!\r\n      <br />Chapter: Chapter 2 (heading will say 'Chapter 2')\r\n      <br />Location: Hallway (heading will say 'Hallway')\r\n      <br />A screenshot of the game.jpeg\r\n      <br /><strong>Person A:</strong> This is a third line from Person A.\r\n    </blockquote>\r\n      <p>When characters have multiple lines at once, the following dialogue formats are accepted:</p>\r\n      <blockquote>\r\n        <strong>Person A:</strong> Line by person A\r\n      <br />Second line by person A (line doesn't begin with name)\r\n      <br /><strong>Person B:</strong> Line by person B\r\n      <br />\r\n        <br /><strong>Person A:</strong> Line by person A\r\n      <br /><strong>Person A:</strong> Second line by person A (line begins with name)\r\n      <br /><strong>Person B:</strong> Line by person B\r\n    </blockquote>\r\n\r\n      <h3>Details Tab</h3>\r\n      <p>Fill in information about the chapter and its appearance on the wiki. These are based on the fields in the Header and Footer templates in the <a href='https://dreaminglive.fandom.com/wiki/Story_Formatting_Guide'>Story Formatting Guide</a>, so reading the guide will help you understand what should go into each text field.</p>\r\n\r\n      <h3 id='tlNotesSection'>TL Notes Tab</h3>\r\n      <p>In the dialogue, you can mark the place the translation note refers to with a marker like this:</p>\r\n      <blockquote>\r\n        Senri: It says I’m Black Dorm![1] Yumapi, what about you?\r\n    </blockquote>\r\n      <p>You can have markers in the middle or end of the line, or even multiple markers in one line if needed.</p>\r\n      <p>In the TL Notes tab, here's an example of how the notes should be formatted:</p>\r\n      <blockquote>\r\n        Chapter 1\r\n      <ol>\r\n          <li>Place translator notes in a numbered list like this.</li>\r\n          <li>Make sure the numbers correspond to each marker!</li>\r\n        </ol>\r\n      </blockquote>\r\n      <ul>\r\n        <li><strong>The first line should be a chapter title</strong> that's UNIQUE within the story (needed for citations to work with the wiki's tab view)</li>\r\n        <li><strong>The TL notes should be in an actual numbered list</strong> as opposed to paragraphs/lines with numbers in front. You can use the editor to format the list:</li>\r\n        <img src={image} alt='Numbered list' />\r\n      </ul>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport Header from './Header.js';\nimport Main from './Main.js';\nimport HowTo from './HowTo.js';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nexport default function App() {\n  //HashRouter should be the top-level element\n  //contents of Switch block changes based on URL\n  //Had to change BrowserRouter to HashRouter:\n  //https://levelup.gitconnected.com/deploying-a-create-react-app-with-routing-to-github-pages-f386b6ce84c2\n  return (\n    <HashRouter basename='/'>\n        <Header />\n        <Switch>\n          <Route path='/howto'>\n              <HowTo />\n          </Route>\n          <Route exact path='/'>\n              <Main />\n          </Route>\n        </Switch>\n    </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}