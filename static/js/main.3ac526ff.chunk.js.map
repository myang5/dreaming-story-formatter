{"version":3,"sources":["Header.js","convertText.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","href","className","target","id","namesOfficial","convertToDom","data","DOMParser","parseFromString","formatStyling","editorDom","querySelectorAll","forEach","strong","replaceWith","innerText","italic","link","convertText","input","paragraphs","p","push","innerHTML","replace","getTextFromDom","this","state","output","currentName","line","console","log","extensions","i","length","toLowerCase","endsWith","isFileName","trim","formatFileName","firstWord","split","includes","slice","toUpperCase","indexOf","setState","inputEditorConfig","plugins","Bold","Italic","Link","PasteFromOffice","Essentials","Paragraph","toolbar","tlNotesEditorConfig","List","Main","props","bind","details","tlNotes","inputEditor","editor","BalloonEditor","config","spellcheck","onChange","event","getData","tlNotesEditor","convert","Output","value","React","Component","Input","openTab","tabLinks","clicked","tab","area","tabcontent","document","style","display","querySelector","tabs","Object","keys","TabMenu","defaultOpen","click","map","btn","Tab","key","text","onClick","TabContent","content","InputArea","DetailArea","DetailRow","label","htmlFor","type","TlArea","Buttons","copyToClip","copied","select","execCommand","ActionButton","defaultValue","Index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ac526ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>\r\n      <a href=\"index.html\">DREAM!ing STORY FORMATTER</a>\r\n      </h1>\r\n      <div className=\"horizontal\">\r\n        <p>\r\n          A website to more easily upload event/gacha stories from the mobile idol game Ensemble Stars to the fandom wiki.\r\n          <br />It takes formats your story chapter into text that can be pasted directly into the \"source\"\r\n        section of the page.\r\n          <br />Developed by <a target=\"_blank\" href=\"https://twitter.com/gayandasleep\">midori</a>.\r\n        </p>\r\n        <ul id=\"navbar\">\r\n          <li><a href=\"./howto.html\">HOW TO USE</a></li>\r\n          <li><a href=\"./plans.html\">DESIGN PLANS</a></li>\r\n          <li><a target=\"_blank\" href=\"https://goo.gl/forms/Xu42LLAgWKxVYV873\">FEEDBACK</a></li>\r\n        </ul>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","const namesOfficial =[\r\n  'YUMA',\r\n  'YANAGI',\r\n  'TOUJI',\r\n  'SHION',\r\n  'SHINYA',\r\n  'SHIGURE',\r\n  'ISSEI',\r\n  'MIKAGE',\r\n  'SENRI',\r\n  'TAKAOMI',\r\n  'JIN',\r\n  'CHIZURU',\r\n  'KASUKA',\r\n  'MINATO',\r\n  'YUNI',\r\n  'RINTARO',\r\n  'KIRITANI',\r\n  'SARUWATARI',\r\n  'INOH',\r\n  'MAMORU',\r\n  'DYLAN',\r\n  'JUDAH',\r\n]\r\n\r\n//lmao\r\nfunction convertToDom(data) {\r\n  return new DOMParser().parseFromString(data, 'text/html');\r\n}\r\n\r\n//each line in CKEditor has <p> wrapper\r\n//params: editorDom - editor data already converted to DOM object\r\n//returns an Array of each line of text\r\nfunction getTextFromDom(editorDom) {\r\n  const paragraphs = editorDom.querySelectorAll('p');\r\n  const input = []\r\n  paragraphs.forEach(function (p) {\r\n    input.push(p.innerHTML.replace(/&nbsp;/g, ''));\r\n  });\r\n  return input;\r\n}\r\n\r\nfunction convertText() {\r\n\r\n  //const values = getValues(); //get user input from all the tabs\r\n\r\n  //format wiki code with user input\r\n  const headerCode =\r\n    `{{Story Header\r\n|Title=         \r\n|Image=         \r\n|Source=        \r\n|TranslatorURL= \r\n|TranslatorName=\r\n|Chapter=       \r\n\r\n`;\r\n  const dialogueCode =\r\n    `}}{{NAME|Dialogue=`;\r\n\r\n  const imageCode =\r\n    `}}{{Story Image|Image=VALUE\r\n\r\n`;\r\n\r\n  const locationCode =\r\n    `}}{{Location|Location=VALUE\r\n\r\n`;\r\n\r\n  const chapterCode =\r\n    `}}{{Chapter Divider|Chapter=VALUE\r\n      \r\n`;\r\n\r\n  const footerCode =\r\n    `}}{{Story Footer\r\n|Prev=          \r\n|Next=          \r\n}}`\r\n\r\n  let inputDom = formatStyling(convertToDom(this.state.input));\r\n  let input = getTextFromDom(inputDom);\r\n  let output = headerCode;\r\n\r\n  let currentName = ''; //needed for case where dialogue has name on every line\r\n  input.forEach(function (line) {\r\n    if (line != '') { //ignore empty lines\r\n      console.log('analyzing line: ' + line);\r\n      if (isFileName(line)) {\r\n        console.log('isFileName: true...');\r\n        //if CG or scene change image file\r\n        //console.log('image file');\r\n        output += imageCode.replace('VALUE', formatFileName(line));\r\n        currentName = ''; //since its new section\r\n\r\n      }\r\n      else { //if dialogue line or header\r\n        //line = formatTlMarker(line);\r\n        let firstWord = line.split(\" \")[0];\r\n        if (!firstWord.includes(\":\")) { //if no colon --> continuing dialogue line\r\n          console.log('no colon, continue dialogue');\r\n          output += line + \"\\n\\n\";\r\n        }\r\n        else {\r\n          console.log('has colon...')\r\n          firstWord = firstWord.slice(0, -1); //remove colon\r\n          if (firstWord.toUpperCase() === 'LOCATION') { //if heading\r\n            console.log('new LOCATION');\r\n            output += locationCode.replace('VALUE', line.slice(line.indexOf(':') + 1).trim());\r\n            currentName = ''; //since its new section\r\n          }\r\n          else if (firstWord.toUpperCase() === 'CHAPTER') { //if heading\r\n            console.log('new CHAPTER');\r\n            output += chapterCode.replace('VALUE', line.slice(line.indexOf(':') + 1).trim());\r\n            currentName = ''; //since its new section\r\n          }\r\n          else if (!namesOfficial.includes(firstWord)) { //if valid character is speaking\r\n            console.log('character speaking... ' + firstWord);\r\n            if (firstWord !== currentName) { //if new character is speaking\r\n              console.log('new character detected')\r\n              //add dialogueRender code to output\r\n              output += dialogueCode.replace('NAME', firstWord);\r\n              //update currentName\r\n              currentName = firstWord;\r\n            }\r\n            line = line.slice(line.indexOf(\":\") + 1).trim(); //get chara's spoken line\r\n            output += line + \"\\n\\n\";\r\n          }\r\n          else {\r\n            //console.log('Formatter was unable to process this name: ' + firstWord);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  //output += formatTlNotes(this.state.tlNotes);\r\n  output += footerCode;\r\n  this.setState({output: output});\r\n}\r\n\r\n//helper function for convertText\r\nfunction getValues() {\r\n  const values = {}\r\n  values.location = document.querySelector('#location').value.trim();\r\n  const select = document.querySelector('#author');\r\n  values.author = select.options[select.selectedIndex].text;\r\n  values.translator = document.querySelector('#translator').value.trim();\r\n  values.tlLink = document.querySelector('#tlLink').value.trim();\r\n  if (values.tlLink === '') { //if TL credit is to a wiki user\r\n    values.translator = `[User:${values.translator}|${values.translator}]`;\r\n  }\r\n  else { //if TL credit is to an external wiki user\r\n    values.translator = `${values.tlLink} ${values.translator}`;\r\n  }\r\n  values.writerCol = '#' + document.querySelector('input[name=writerCol]').value;\r\n  values.locationCol = '#' + document.querySelector(\"input[name=locationCol]\").value;\r\n  values.bottomCol = '#' + document.querySelector('input[name=bottomCol]').value;\r\n  values.textCol = '#' + document.querySelector('input[name=textCol]').value;\r\n  return values;\r\n}\r\n\r\n//helper function to check if the line is a file\r\n//params: line - a String\r\n//returns a boolean value representing if the string is a file name\r\nfunction isFileName(line) {\r\n  const extensions = ['.png', '.gif', '.jpg', '.jpeg', '.ico', '.pdf', '.svg'];\r\n  for (let i = 0; i < extensions.length; i++) {\r\n    if (line.toLowerCase().endsWith(extensions[i])) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//helper function to remove file extension if it exists\r\n//params: line - a String\r\n//returns a String with extension removed\r\nfunction formatFileName(line) {\r\n  line = line.trim();\r\n  const extensions = ['.png', '.gif', '.jpg', '.jpeg', '.ico', '.pdf', '.svg'];\r\n  for (let i = 0; i < extensions.length; i++) {\r\n    if (line.toLowerCase().endsWith(extensions[i])) {\r\n      return line.replace(extensions[i], '');\r\n    }\r\n  }\r\n  return line;\r\n}\r\n\r\n//helper function to format bold, italics, links based on HTML tags\r\n//params: editorDom - editor data already converted to DOM object\r\n//returns a DOM object with specified HTML tags converted to wiki code equivalent\r\nfunction formatStyling(editorDom) {\r\n  editorDom.querySelectorAll('strong').forEach(function (strong) {\r\n    strong.replaceWith(`'''${strong.innerText}'''`);\r\n  });\r\n  editorDom.querySelectorAll('i').forEach(function (italic) {\r\n    italic.replaceWith(`''${italic.innerText}''`);\r\n  });\r\n  editorDom.querySelectorAll('a').forEach(function (link) {\r\n    link.replaceWith(`[${link.href} ${link.innerText}]`);\r\n  });\r\n  return editorDom;\r\n}\r\n\r\n//helper function to format tl note markers\r\nfunction formatTlMarker(line) {\r\n  if (line.search(/\\[\\d+\\]/) != -1) { //if there is a tlMarker\r\n    let title = getChapTitle(this.state.tlNotes);\r\n    if (title != undefined) {\r\n      let tlCode = `<span id='${title}RefNUM'>[[#${title}NoteNUM|<sup>[NUM]</sup>]]</span>`;\r\n      const markers = line.match(/\\[\\d+\\]/g);\r\n      markers.forEach(function (marker) {\r\n        let num = marker.substring(marker.indexOf('[') + 1, marker.indexOf(']'));\r\n        let newTlCode = tlCode.replace(/NUM/g, num);\r\n        line = line.replace(marker, newTlCode)\r\n      });\r\n    }\r\n  }\r\n  return line;\r\n}\r\n\r\n//helper function to get and format chapter title from tl notes\r\n//assumes the editor has some data\r\nfunction getChapTitle(data) {\r\n  if (data.includes('<ol>') && data.includes('<p>')) { //editor already has the <p> in it, so user must input some sort of new <p> (the chapter title) and an <ol> (the TL notes)\r\n    //let inputDom = clearGDocSpan(convertToDom(data).querySelector('p'));\r\n    let inputDom = (convertToDom(data).querySelector('p'));\r\n    let title = inputDom.innerText;\r\n    title = title.replace(' ', '');\r\n    return title;\r\n  }\r\n  else {\r\n    //ERROR: add alert to let user know they didn't provide a chapter title\r\n    //console.log('Please make sure to include a title in the TL Notes section')\r\n  }\r\n}\r\n\r\n//helper function to format TlNotes\r\n//assumes that there is a valid title and correct number of TL notes\r\nfunction formatTlNotes() {\r\n  let title = getChapTitle(this.state.tlNotes); //ERROR: only do this if there are tl notes available\r\n  if (title != undefined) {\r\n    let inputDom = formatStyling(convertToDom(this.state.tlNotes));\r\n    let notes = []\r\n    const listItems = inputDom.querySelectorAll('li');\r\n    listItems.forEach(function (li) {\r\n      notes.push(li.innerHTML.replace(/&nbsp;/g, ''));\r\n    });\r\n    let output =\r\n      `|-\r\n| colspan=\"2\"|`;\r\n    let tlCode = `<span id='${title}NoteNUM'>NUM.[[#${title}RefNUM|↑]] TEXT</span><br />`;\r\n    for (let i = 0; i < notes.length; i++) {\r\n      let newTlCode = tlCode.replace(/NUM/g, i + 1);\r\n      output += newTlCode.replace('TEXT', notes[i]);\r\n    }\r\n    output = output.replace(/<br \\/>$/m, \"\\n\");\r\n    return output;\r\n  }\r\n  else return ''\r\n}\r\n\r\n\r\nexport default convertText;","import React from 'react';\r\nimport Header from './Header.js';\r\n\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport BalloonEditor from '@ckeditor/ckeditor5-editor-balloon/src/ballooneditor.js';\r\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold.js';\r\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic.js';\r\nimport Link from '@ckeditor/ckeditor5-link/src/link.js';\r\nimport List from '@ckeditor/ckeditor5-list/src/list.js';\r\nimport PasteFromOffice from '@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice';\r\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials.js';\r\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph.js';\r\n\r\nimport convertText from './convertText.js'\r\n\r\nconst inputEditorConfig = {\r\n  plugins: [Bold, Italic, Link, PasteFromOffice, Essentials, Paragraph],\r\n  toolbar: ['bold', 'italic', 'link', '|', 'undo', 'redo']\r\n};\r\n\r\nconst tlNotesEditorConfig = {\r\n  plugins: [Bold, Italic, Link, List, PasteFromOffice, Essentials, Paragraph],\r\n  toolbar: ['bold', 'italic', 'link', 'numberedList', '|', 'undo', 'redo']\r\n};\r\n\r\nfunction Index() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Main />\r\n    </>\r\n  );\r\n}\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.convertText = convertText.bind(this);\r\n    this.state = {\r\n      input: \"<p>If this is your first time using the formatter, please check the <a href='./howto.html'>Text Guidelines</a> to make sure your text is ready.</p>\",\r\n      details: {},\r\n      tlNotes: \"<p>If this is your first time using the formatter, please check the <a href='./howto.html#tlNotesSection'>Text Guidelines</a> for how to add translation notes.</p>\",\r\n      output: '',\r\n    }\r\n    this.inputEditor = (\r\n      <CKEditor\r\n        editor={BalloonEditor}\r\n        config={inputEditorConfig}\r\n        data={this.state.input}\r\n        id='inputEditor'\r\n        spellcheck={false}\r\n        onChange={(event, editor) => {\r\n          const data = editor.getData();\r\n          //console.log({ event, editor, data });\r\n          this.setState({ input: data });\r\n        }}\r\n      />\r\n    )\r\n    this.tlNotesEditor = (\r\n      <CKEditor\r\n        editor={BalloonEditor}\r\n        config={tlNotesEditorConfig}\r\n        data={this.state.tlNotes}\r\n        id='tlEditor'\r\n        spellcheck={false}\r\n        onChange={(event, editor) => {\r\n          const data = editor.getData();\r\n          //console.log({ event, editor, data });\r\n          this.setState({ tlNotes: data });\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  // convertText() {\r\n  //   //this.setState((state) => ({output: state.input}));\r\n  //   convertText();\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className='main'>\r\n        <Input inputEditor={this.inputEditor} tlNotesEditor={this.tlNotesEditor} />\r\n        <Buttons convert={this.convertText} />\r\n        <Output value={this.state.output} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.openTab = this.openTab.bind(this);\r\n    this.state = {\r\n      tabLinks: {\r\n        'Text': 'inputArea',\r\n        'Details': 'detailArea',\r\n        'TL Notes': 'tlArea',\r\n      },\r\n      clicked: ''\r\n    }\r\n  }\r\n\r\n  openTab(tab) {\r\n    const area = '#' + this.state.tabLinks[tab]\r\n    // console.log(tab, area);\r\n    const tabcontent = document.querySelectorAll('.tabcontent');\r\n    for (let i = 0; i < tabcontent.length; i++) {\r\n      tabcontent[i].style.display = 'none';\r\n    }\r\n    document.querySelector(area).style.display = 'block';\r\n    this.setState({ clicked: tab })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='input'>\r\n        <TabMenu tabs={Object.keys(this.state.tabLinks)} clicked={this.state.clicked} openTab={this.openTab} />\r\n        <InputArea inputEditor={this.props.inputEditor} />\r\n        <DetailArea />\r\n        <TlArea tlNotesEditor={this.props.tlNotesEditor} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass TabMenu extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      defaultOpen: 'Text',\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.querySelector(`[value='${this.state.defaultOpen}']`).click();\r\n  }\r\n\r\n  render() {\r\n    const tabs = this.props.tabs.map((btn) =>\r\n      <Tab key={btn}\r\n        value={btn}\r\n        className={'tablink' + (this.props.clicked === btn ? ' active' : '')}\r\n        text={btn}\r\n        onClick={() => this.props.openTab(btn)}\r\n      />\r\n    )\r\n    return <div className='tabMenu'>{tabs}</div>;\r\n  }\r\n}\r\n\r\nfunction Tab(props) {\r\n  return (\r\n    <button className={props.className} value={props.value} onClick={props.onClick}>\r\n      {props.text}\r\n    </button>\r\n  )\r\n}\r\n\r\nclass TabContent extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id={this.props.id} className='tabcontent'>\r\n        {this.props.content}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass InputArea extends React.Component {\r\n  render() {\r\n    return <TabContent id={'inputArea'} content={this.props.inputEditor} />\r\n  }\r\n}\r\n\r\nclass DetailArea extends React.Component {\r\n  render() {\r\n    const content = (\r\n      <>\r\n        <div className='row'>\r\n          <h3>Story Details</h3>\r\n        </div>\r\n        <DetailRow label='Title' />\r\n        <DetailRow label='Header Image' />\r\n        <DetailRow label='Source' />\r\n        <DetailRow label='Translator' />\r\n        <div className='row'>\r\n          <span className='spacer'></span>\r\n          <label className='spacer' htmlFor='tlLink'>Translator credit link</label>\r\n        </div>\r\n        <div className='row'>\r\n          <span className='spacer'></span>\r\n          <input type='text' id='tlLink' />\r\n        </div>\r\n      </>\r\n    )\r\n    return <TabContent id={'detailArea'} content={content} />\r\n  }\r\n}\r\n\r\nfunction DetailRow(props) {\r\n  const id = props.label[0].toUpperCase() + props.label.slice(1, props.label.length).replace(' ', '')\r\n  return (\r\n    <div className='row'>\r\n      <label className='spacer'>{props.label}</label>\r\n      <input type='text' id={id} />\r\n    </div>\r\n  )\r\n}\r\n\r\nclass TlArea extends React.Component {\r\n  render() {\r\n    return <TabContent id={'tlArea'} content={this.props.tlNotesEditor} />\r\n  }\r\n}\r\n\r\nclass Buttons extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.copyToClip = this.copyToClip.bind(this)\r\n    this.state = {\r\n      copied: false,\r\n    }\r\n  }\r\n\r\n  copyToClip() {\r\n    document.querySelector('#output').select();\r\n    document.execCommand('copy');\r\n    this.setState({ copied: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='btnArea'>\r\n        <ActionButton onClick={this.props.convert} id='convertBtn' text='CONVERT' />\r\n        <ActionButton onClick={this.copyToClip} id='copyBtn' text={this.state.copied ? 'Copied' : 'Copy Output'} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction ActionButton(props) {\r\n  return (\r\n    <button onClick={props.onClick} id={props.id}>{props.text}</button>\r\n  )\r\n}\r\n\r\nfunction Output(props) {\r\n  return <textarea id='output' defaultValue={props.value}></textarea>\r\n}\r\n\r\n\r\nexport default Index;","import React from 'react';\nimport Index from './Main.js';\nimport './App.css';\nimport './ck-styles.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Index />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}